---
  title: "Exploring Data Analysis"
author: "Abhinav Cheruvu,Arka Bose, Sebastian"
format: pdf
---
```{r}
data <- read.csv("../../Data/data.csv")
data2 <- read.csv("../../Data/500cities.csv")
```


```{r}
library(dplyr)
# Assuming your data frame is named 'data'

# Step 1: Convert columns to strings and pad with leading zeros
data$STATEFP <- sprintf("%02d", as.numeric(data$STATEFP))
data$COUNTYFP <- sprintf("%03d", as.numeric(data$COUNTYFP))
data$TRACTCE <- sprintf("%06d", as.numeric(data$TRACTCE))

# Step 2: Concatenate the padded columns
data$TractFIPS <- paste0(data$STATEFP, data$COUNTYFP, data$TRACTCE)

# Step 3: Convert the concatenated string to integer
data$TractFIPS <- as.numeric(data$TractFIPS)

```



```{r}
colnames(data)
```


```{r}
# Assuming your data frames are named 'data1' and 'data2'
averaged_data <- data %>%
  group_by(TractFIPS) %>%
  summarise(NatWalkInd = mean(NatWalkInd, na.rm = TRUE)) %>%
  ungroup()

```

```{r}
merged_data <- merge(averaged_data, data2, by = "TractFIPS", all.x = TRUE, all.y = TRUE)
merged_data <- merged_data %>%
  filter(StateAbbr == "CA")
```



































```{r}
library(sf)
library(dplyr)
library(ggplot2)
spatial_data <- st_read("../../Data/shapes/ca_tract")

spatial_data$TractFIPS <- as.numeric(spatial_data$GEOID)
merged_data <- merge(merged_data, spatial_data, by = "TractFIPS", all.x = TRUE, all.y = TRUE)

merged_data <- na.omit(merged_data)

```

```{r}
merged_sf <- st_as_sf(merged_data)
ggplot() +
  geom_sf(data = merged_sf, aes(fill = NatWalkInd)) +
  scale_fill_gradientn(colours = terrain.colors(8),
                       limits = c(0, 20),
                       breaks = c(0, 10, 20))

```
```{r}
colnames(merged_data)
```


```{r}
ggplot() +
  geom_sf(data = merged_sf, aes(fill = DIABETES_CrudePrev)) +
  scale_fill_gradientn(colours = terrain.colors(8),
                       limits = c(0, 28),
                       breaks = c(0, 12.5, 25)) 
```

```{r}
library(GWmodel)
library(sf)

merged_spatialdf <- as(merged_sf, "Spatial")

merged_gwr_bw <- bw.gwr(DIABETES_CrudePrev ~ OBESITY_CrudePrev + BPHIGH_CrudePrev + LPA_CrudePrev + CSMOKING_CrudePrev,
                        data = merged_spatialdf,
                        kernel = "exponential",
                        parallel.method = "omp")

merged_gwr <- gwr.basic(DIABETES_CrudePrev ~ OBESITY_CrudePrev + BPHIGH_CrudePrev + LPA_CrudePrev + CSMOKING_CrudePrev,
                        data = merged_spatialdf,
                        bw = merged_gwr_bw,
                        kernel = "exponential",
                        parallel.method = "omp")

gwr_results_sf <- merged_gwr$SDF %>% as("sf")
```

This is a Gradient Boosting Model used to predict the Diabetes rate based on risk factors as the covariates.Gradient boosting is an ensemble learning technique that builds a predictive model by sequentially adding weak learners, usually decision trees, to correct the errors of previous models. It focuses on minimizing prediction errors by training each new model to predict the residuals of the ensemble. Through this iterative process, gradient boosting creates a strong predictive model that combines the strengths of multiple weak learners, resulting in high accuracy for regression and classification tasks.

```{r}
library(gbm)

data_df <- as.data.frame(merged_spatialdf)

gbm_model <- gbm(DIABETES_CrudePrev ~ OBESITY_CrudePrev + BPHIGH_CrudePrev + LPA_CrudePrev + CSMOKING_CrudePrev,
                 data = data_df,
                 distribution = "gaussian",  
                 n.trees = 500,  
                 interaction.depth = 3,  
                 shrinkage = 0.1,  
                 bag.fraction = 0.5,  
                 cv.folds = 5,  
                 verbose = TRUE)  

summary(gbm_model)



```

```{r}
library(randomForest)

data_df <- as.data.frame(merged_spatialdf)

rf_model <- randomForest(DIABETES_CrudePrev ~ OBESITY_CrudePrev + BPHIGH_CrudePrev + LPA_CrudePrev + CSMOKING_CrudePrev,
                         data = data_df)

print(rf_model)

```

