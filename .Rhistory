library(tidyverse)
library(sf)
library(ggfortify)
set.seed(12345)
library(GWmodel)
vacdata_spatialpolys = US_Conus_VacSocial %>%
select(!GEOID:lat) %>% as_Spatial()
library(tidyverse)
library(sf)
library(ggfortify)
set.seed(12345)
#| fig-align: center
#| layout-valign: center
#| out-width: "100%"
#| out-height: "85%"
load("VacData.Rdata")
ggplot(US_Conus_VacSocial) +
geom_sf(aes(fill = perc_vac),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Percentage of population vaccinated for COVID-19",
fill = "%Vac")
#| fig-align: center
#| out-width: "100%"
vacdata_numeric = US_Conus_VacSocial %>%
select(lon:perc_HealthInsurance) %>% st_drop_geometry()
vacdata_lm = lm(perc_vac ~ ., data = vacdata_numeric)
US_Conus_VacSocial %>%
mutate("Predicted %Vac" = predict(vacdata_lm,
newdata = vacdata_numeric)) %>%
ggplot() +
geom_sf(aes(fill = `Predicted %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Predicted Values for %Vac by linear model")
autoplot(vacdata_lm,
colour = scales::alpha("black",
alpha = 0.3),
smooth.colour = "red") +
theme_bw() +
theme(text = element_text(size = 20))
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("%Vac Abs Err" = abs(predict(vacdata_lm,
newdata = vacdata_numeric) -
vacdata_numeric$perc_vac)) %>%
ggplot() +
geom_sf(aes(fill = `%Vac Abs Err`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_viridis_c(limits = c(0, 60),
breaks = c(10, 30, 50)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Absolute Prediction Error of %Vac by linear model")
vacdata_numeric_prop = vacdata_numeric %>%
mutate(vac_pop = ceiling((perc_vac/100)*population)) %>%
select(!perc_vac)
vacdata_glm = glm(cbind(vac_pop, population) ~ .,
data = vacdata_numeric_prop,
family = binomial)
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("Predicted %Vac" = predict(vacdata_glm,
newdata = vacdata_numeric_prop,
type = "response")*100) %>%
ggplot() +
geom_sf(aes(fill = `Predicted %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Predicted Values for %Vac by generalized linear model")
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("%Vac Abs Err" = abs(predict(vacdata_glm,
newdata = vacdata_numeric_prop,
type = "response")*100 -
vacdata_numeric$perc_vac)) %>%
ggplot() +
geom_sf(aes(fill = `%Vac Abs Err`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_viridis_c(limits = c(0, 60),
breaks = c(10, 30, 50)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Absolute Prediction Error of %Vac by generalized linear model")
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("%Vac Err" = (predict(vacdata_glm,
newdata = vacdata_numeric_prop,
type = "response")*100 -
vacdata_numeric$perc_vac)) %>%
ggplot() +
geom_histogram(aes(x = `%Vac Err`), bins = 20) +
theme_bw() +
theme(text = element_text(size = 20))
vacdata_fixed_cov = vacdata_numeric_prop %>%
mutate(across(population:perc_HealthInsurance,
~mean(.x))) %>%
select(!vac_pop)
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("Spatial Effect on %Vac" = predict(vacdata_lm,
newdata = vacdata_fixed_cov)) %>%
ggplot() +
geom_sf(aes(fill = `Spatial Effect on %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Effect of spatial location on %Vac by \n linear model")
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("Spatial Effect on %Vac" = predict(vacdata_glm,
newdata = vacdata_fixed_cov,
type = "response")*100) %>%
ggplot() +
geom_sf(aes(fill = `Spatial Effect on %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Effect of spatial location on %Vac by \ngeneralized linear model")
library(GWmodel)
vacdata_spatialpolys = US_Conus_VacSocial %>%
select(!GEOID:lat) %>% as_Spatial()
# First, need to find the bandwidth
vacdata_gwr_bw = bw.gwr(perc_vac ~ ., data = vacdata_spatialpolys,
kernel = "exponential")
# Bandwidth in hand, fit the model!
vacdata_gwr = gwr.basic(perc_vac ~ ., data = vacdata_spatialpolys,
bw = vacdata_gwr_bw, kernel = "exponential",
parallel.method = "omp")
library(tidyverse)
library(sf)
library(ggfortify)
set.seed(12345)
#| fig-align: center
#| layout-valign: center
#| out-width: "100%"
#| out-height: "85%"
load("VacData.Rdata")
ggplot(US_Conus_VacSocial) +
geom_sf(aes(fill = perc_vac),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Percentage of population vaccinated for COVID-19",
fill = "%Vac")
#| fig-align: center
#| out-width: "100%"
vacdata_numeric = US_Conus_VacSocial %>%
select(lon:perc_HealthInsurance) %>% st_drop_geometry()
vacdata_lm = lm(perc_vac ~ ., data = vacdata_numeric)
US_Conus_VacSocial %>%
mutate("Predicted %Vac" = predict(vacdata_lm,
newdata = vacdata_numeric)) %>%
ggplot() +
geom_sf(aes(fill = `Predicted %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Predicted Values for %Vac by linear model")
autoplot(vacdata_lm,
colour = scales::alpha("black",
alpha = 0.3),
smooth.colour = "red") +
theme_bw() +
theme(text = element_text(size = 20))
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("%Vac Abs Err" = abs(predict(vacdata_lm,
newdata = vacdata_numeric) -
vacdata_numeric$perc_vac)) %>%
ggplot() +
geom_sf(aes(fill = `%Vac Abs Err`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_viridis_c(limits = c(0, 60),
breaks = c(10, 30, 50)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Absolute Prediction Error of %Vac by linear model")
vacdata_numeric_prop = vacdata_numeric %>%
mutate(vac_pop = ceiling((perc_vac/100)*population)) %>%
select(!perc_vac)
vacdata_glm = glm(cbind(vac_pop, population) ~ .,
data = vacdata_numeric_prop,
family = binomial)
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("Predicted %Vac" = predict(vacdata_glm,
newdata = vacdata_numeric_prop,
type = "response")*100) %>%
ggplot() +
geom_sf(aes(fill = `Predicted %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Predicted Values for %Vac by generalized linear model")
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("%Vac Abs Err" = abs(predict(vacdata_glm,
newdata = vacdata_numeric_prop,
type = "response")*100 -
vacdata_numeric$perc_vac)) %>%
ggplot() +
geom_sf(aes(fill = `%Vac Abs Err`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_viridis_c(limits = c(0, 60),
breaks = c(10, 30, 50)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Absolute Prediction Error of %Vac by generalized linear model")
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("%Vac Err" = (predict(vacdata_glm,
newdata = vacdata_numeric_prop,
type = "response")*100 -
vacdata_numeric$perc_vac)) %>%
ggplot() +
geom_histogram(aes(x = `%Vac Err`), bins = 20) +
theme_bw() +
theme(text = element_text(size = 20))
vacdata_fixed_cov = vacdata_numeric_prop %>%
mutate(across(population:perc_HealthInsurance,
~mean(.x))) %>%
select(!vac_pop)
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("Spatial Effect on %Vac" = predict(vacdata_lm,
newdata = vacdata_fixed_cov)) %>%
ggplot() +
geom_sf(aes(fill = `Spatial Effect on %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Effect of spatial location on %Vac by \n linear model")
#| fig-align: center
#| out-width: "100%"
US_Conus_VacSocial %>%
mutate("Spatial Effect on %Vac" = predict(vacdata_glm,
newdata = vacdata_fixed_cov,
type = "response")*100) %>%
ggplot() +
geom_sf(aes(fill = `Spatial Effect on %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Effect of spatial location on %Vac by \ngeneralized linear model")
library(GWmodel)
vacdata_spatialpolys = US_Conus_VacSocial %>%
select(!GEOID:lat) %>% as_Spatial()
# First, need to find the bandwidth
vacdata_gwr_bw = bw.gwr(perc_vac ~ ., data = vacdata_spatialpolys,
kernel = "exponential")
# Bandwidth in hand, fit the model!
vacdata_gwr = gwr.basic(perc_vac ~ ., data = vacdata_spatialpolys,
bw = vacdata_gwr_bw, kernel = "exponential")
gwr_results_sf = vacdata_gwr$SDF %>% as("sf")
#| fig-align: center
#| out-width: "100%"
gwr_results_sf %>%
mutate("Predicted %Vac" = yhat) %>%
ggplot() +
geom_sf(aes(fill = `Predicted %Vac`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_gradientn(colours = terrain.colors(8),
limits = c(0, 100),
breaks = c(25, 50, 75)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Predicted Values for %Vac by GWR w/ exponential kernel")
#| fig-align: center
#| out-width: "100%"
gwr_results_sf %>%
mutate("%Vac Abs Err" = abs(yhat - y)) %>%
ggplot() +
geom_sf(aes(fill = `%Vac Abs Err`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_viridis_c(limits = c(0, 60),
breaks = c(10, 30, 50)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title = "Absolute Prediction Error of %Vac by GWR w/ \nexponential kernel")
#| fig-align: center
#| out-width: "100%"
gwr_results_sf %>%
mutate("%Health Insurance Coeff" = perc_HealthInsurance) %>%
ggplot() +
geom_sf(aes(fill = `%Health Insurance Coeff`),
color = scales::alpha("black",
alpha = 0.1)) +
scale_fill_viridis_c(breaks = c(-4, 0, 4)) +
theme(text = element_text(size = 20),
legend.position = "bottom") +
labs(title =
"Estimated Coefficient Surface of \n%Pop. having Health Insurance")
# Load necessary libraries
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(tidyr)
# Correct the file path to match the actual location of your CSV file
file_path <- "../data/500_Cities__Diagnosed_diabetes_among_adults_aged___18_years_20240219.csv"
# Check if the file exists before attempting to read it
if (!file.exists(file_path)) {
stop("The file does not exist in the specified directory.")
}
# Read data
health_data <- read_csv(file_path)
# Separate GeoLocation into Latitude and Longitude
health_data <- health_data %>%
mutate(GeoLocation = gsub("[()]", "", GeoLocation)) %>%
separate(GeoLocation, into = c("Latitude", "Longitude"), sep = ", ", convert = TRUE)
# Select the columns of interest, including Year, Latitude, and Longitude
selected_columns <- health_data %>%
select(Year, Latitude, Longitude, Data_Value, Low_Confidence_Limit, High_Confidence_Limit, PopulationCount)
# Convert selected columns to a numeric matrix, if not already
numeric_data <- data.matrix(selected_columns)
# Ensure all selected data is numeric and finite
numeric_data <- ifelse(!is.finite(numeric_data), NA, numeric_data)
![](correlation_matrix.png)
View(US_Conus_VacSocial)
data <- read.csv("../Data/data.csv")
colnames(data)
library(sf)
library(dplyr)
spatial_data <- st_read("../Data/shapes/texas")
data <- data %>%
group_by(BLKGRPCE) %>%
summarise_all(mean, na.rm = TRUE)
data <- read.csv("../Data/data.csv")
data <- read.csv("../Data/data.csv")
data <- read.csv("../Data/data.csv")
colnames(data)
library(sf)
library(dplyr)
library(ggplot2)
spatial_data <- st_read("../Data/shapes/texas")
data <- data %>%
group_by(BLKGRPCE) %>%
summarise_all(mean, na.rm = TRUE)
merged_data <- merge(data, spatial_data, by = "BLKGRPCE")
colnames(merged_data)
merged_data$geometry
merged_sf <- st_as_sf(merged_data)
# Plot the spatial data with ggplot
ggplot() +
geom_sf(data = merged_sf, aes(fill = NatWalkInd))
spatial_data <- st_read("../Data/shapes/ny")
data <- data %>%
group_by(BLKGRPCE) %>%
summarise_all(mean, na.rm = TRUE)
merged_data <- merge(data, spatial_data, by = "BLKGRPCE")
colnames(merged_data)
merged_sf <- st_as_sf(merged_data)
# Plot the spatial data with ggplot
ggplot() +
geom_sf(data = merged_sf, aes(fill = NatWalkInd))
data3 <- read.csv("../Data/500cities.csv")
library(stringr)
library(dplyr)
library(sf)
library(ggplot2)
regex_pattern <- "\\((-?\\d+\\.\\d+),\\s*(-?\\d+\\.\\d+)\\)"
data3$latitude =  as.numeric(str_match(data3$GeoLocation, regex_pattern)[, 2])
data3$longitude =  as.numeric(str_match(data3$GeoLocation, regex_pattern)[, 3])
options(digits = 10)
data3$latitude
filtered_df_subset <- subset(data3, DataValueTypeID == "CrdPrv")
ggplot(filtered_df_subset, aes(x = longitude, y = latitude,color=Data_Value)) +
geom_point() +
ggtitle("Spatial Plot with Latitude and Longitude") +
xlab("Longitude") +
ylab("Latitude") +
theme_minimal()
data3$Short_Question_Text
